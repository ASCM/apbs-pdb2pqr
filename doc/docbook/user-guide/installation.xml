<chapter id="installation-sect"> <title>Installation</title>
  <para>The following sections outline the installation of APBS on a generic
    UNIX platform as well as installation instructions for various specific
    machines.</para>

  <sect1 id="obtaining-sect"> <title>Availability</title>
    <para>The latest version of APBS can always be found at 
      <ulink url="http://agave.wustl.edu/apbs/">
        http://agave.wustl.edu/apbs</ulink> in source code form.  Additionally,
      binary versions of the code are available for a limited number of
      platforms.</para>
  </sect1>

  <sect1> <title>Binary installation</title>
    <para>
      Currently, we only offer RPM-format binaries for RedHat Linux platforms.
      However, we are actively developing binary support for several other
      systems, including:  WinXP, MacOSX, AIX, and generic Linux systems.
      In the meantime, please install from source on your particular platform
      and/or contact the <link linkend="mailing-lists">APBS users mailing
        list</link> for more help.
    </para>
  </sect1>

  <sect1> <title>Source installation</title>
    <para>If you were unable to find the binary pacakge for your system, or
      would like to compile APBS yourself, you'll need to read the instructions
      in this section.</para>

    <sect2 id="prerequisites-sect"> <title>Prerequisites</title>
      <para>Binary executables for APBS are available from the APBS dowloads site
        (<ulink url="http://agave.wustl.edu/apbs/download/">
          http://agave.wustl.edu/apbs/download</ulink>).  We currently only
        have binary versions for RedHat Linux but are in the processor of
        developing binaries for several other popular platforms.  In the
        meantime, please install APBS from source, as described below.
      </para>
      
      <para>In order to install APBS from the source code, you will need:
        <itemizedlist> 
          <listitem> <para>C and Fortran compilers</para> </listitem>
          <listitem> <para>The APBS source code (see 
          <link linkend="obtaining-sect">above</link>)</para> </listitem>
          <listitem> <para>The MALOC hardware abstraction library (available from
          <ulink url="http://www.scicomp.ucsd.edu/~mholst/codes/maloc/index.html">http://www.scicomp.ucsd.edu/~mholst/codes/maloc/index.html</ulink>)</para>
          </listitem>
        </itemizedlist>
      It may also be useful to have:
        <itemizedlist>
          <listitem> 
            <para>A version of MPI (try 
              <ulink url="http://www-unix.mcs.anl.gov/mpi/mpich/">MPICH</ulink>) 
              for parallel jobs.  
              <note>
                <para>
                  MPI isn't strictly necessary if the 
                  <link linkend="async"><option>async</option></link> option is
                  used.
                </para>
              </note>
            </para>
          </listitem>
          <listitem> <para>A compatible visualization program (see the 
          <link linkend="visualization-sect">"Visualization"</link> section of
          this document)</para>
          </listitem>
        </itemizedlist>
      </para>
    </sect2>
      
    <sect2 id="setup-sect"> <title>Preparation for installation</title>
      <para>In what follows, I'll be assuming you're using 
      <ulink url="http://www.gnu.org/software/bash/bash.html">bash</ulink>, a
      fantastic shell available on many platforms (UNIX and non-UNIX).</para>
  
      <sect3> <title>Compiler variables</title>
        <para>First, please look at the 
        <link linkend="machine-sect">"Machine-specific notes"</link> section of
        this document for appropriate compiler flags, etc. to be set via
        pre-configuration environmental variables.  It's not a big deal if you
        skip this step, but APBS will run more slowly.</para>
      </sect3>

      <sect3> <title>Installation directories</title>
        <para>There are two directories you'll need to identify prior to
        installation.  The first, which we'll call
        <parameter>FETK_SRC</parameter>, will contain the APBS and MALOC source
        code.  This directory can be deleted after installation, if you wish.
        The second directory will be the permanent location for APBS and MALOC;
        we'll call this <parameter>FETK_PREFIX</parameter>.  If you have root
        permission, you could pick a global directory such as
        <filename>/usr/local</filename> for this; otherwise, pick a directory
        for which you have write permission.  The following commands set up the
        directories and environmental which point to them:
          <screen>
            <prompt>$</prompt> <userinput>export FETK_SRC=/home/soft/src</userinput>
            <prompt>$</prompt> <userinput>export FETK_PREFIX=/home/soft</userinput>
            <prompt>$</prompt> <userinput>export FETK_INCLUDE=${FETK_PREFIX}/include</userinput>
            <prompt>$</prompt> <userinput>export FETK_LIBRARY=${FETK_PREFIX}/lib</userinput>
            <prompt>$</prompt> <userinput>mkdir -p ${FETK_SRC} ${FETK_INCLUDE} ${FETK_LIBRARY}</userinput>
          </screen>
        </para>
        <note>
          <para>
            If you're planning to use MPI, you'll need to set some additional
            environmental variables.  The variable
            <parameter>FETK_MPI_INCLUDE</parameter> points to the directory
            where the MPI header files reside (<filename>mpi.h</filename>) and
            the variable <parameter>FETK_MPI_LIBRARY</parameter> points to the
            directory where the MPI libraries are located
            (<filename>libmpi.a</filename> or <filename>libmpich.a</filename>).
            For example, on my system, I type:
            <screen>
              <prompt>$</prompt> <userinput>export FETK_MPI_INCLUDE=/usr/share/mpi/include</userinput>
              <prompt>$</prompt> <userinput>export FETK_MPI_LIBRARY=/usr/share/mpi/lib</userinput>
            </screen>
          </para>
        </note>
      </sect3>

      <sect3> <title>Unpacking the source code</title>
        <para>You're now ready to unpack the source code:
          <screen>
            <prompt>$</prompt> <userinput>cd ${FETK_SRC}</userinput>
            <prompt>$</prompt> <userinput>gzip -dc maloc.tar.gz | tar xvf -</userinput>
            <prompt>$</prompt> <userinput>gzip -dc apbs-&apbsver;.tar.gz | tar xvf -</userinput>
          </screen>
        </para>
      </sect3>

      <sect3> <title>Compiling MALOC</title>
        <para>Now we need to compile the hardware-abstraction library, MALOC.
        First, go to the MALOC directory:
          <screen>
            <prompt>$</prompt> <userinput>cd ${FETK_SRC}/maloc</userinput>
          </screen>
          <caution>
            <para>
              If you are not starting from a freshly-untarred version of
              MALOC, you need to clean up the previous distribution by:
              <screen>
                <prompt>$</prompt> <userinput>make distclean</userinput>
              </screen>
              and ignoring any error messages that may result.
            </para>
          </caution>
        MALOC is configured for installation with the autoconf script
        <literal>configure</literal>.  Configure options can be listed with the
        <option>--help</option> option.  However, MALOC is usually configured
        in one of two ways for use with APBS:
          <orderedlist>
            <listitem>
              <para>Sequential execution only (no MPI):
                <screen>
                  <prompt>$</prompt> <userinput>./configure --prefix=${FETK_PREFIX}</userinput>
                </screen>
              </para>
            </listitem>
            <listitem>
              <para>With parallel execution (MPI):
                <screen>
                  <prompt>$</prompt> <userinput>./configure --prefix=${FETK_PREFIX} --enable-mpi</userinput>
                </screen>
              </para>
            </listitem>
          </orderedlist>
          <caution>
            <para>
              Be sure to keep an eye out for warning messages during the
              configuration of MALOC, especially if you are using MPI.
            </para>
          </caution>
          At this point, you are ready to make and install MALOC:
            <screen>
              <prompt>$</prompt> make; make install
           </screen>
          If all went well (you'll see an error message if either the
          compilation or installation failed), then you're ready to install
          APBS...
        </para>
      </sect3>
    </sect2>

    <sect2> <title>Configuring, compiling, and installing</title>
      <para> APBS is configured and installed much the same way as MALOC.
      First, you need to configure with the autoconf
      <literal>configure</literal> script.  As before, you can examine the
      various configure options with the <option>--help</option> option.  For
      most platforms, no options need to be specified; APBS's autoconf setup
      automatically detects whether MALOC was compiled with MPI and configures
      itself appropriately.  Therefore, most users can configure as follows:
        <screen>
          <prompt>$</prompt> <userinput>cd ${FETK_SRC}/apbs</userinput>
          <prompt>$</prompt> <userinput>./configure --prefix=${FETK_PREFIX}</userinput>
        </screen>
      There's no need to pay too much attention to the autoconf messages here.
      If the APBS configuration script can't find something it needs, it will
      simply fail to configure and exit with a hopefully-informative error
      message.
        <note>
          <para>If you have a vendor-supplied BLAS math library, you will
          probably compile a faster version of APBS if you link to it instead
          of the BLAS version provided with MALOC.  This is done by passing the
          appropriate linking options to <literal>configure</literal> with the
          <option>--with-blas</option> flag.  For example, suppose you had a
          machine-specific version of the BLAS library at
          <filename>/usr/local/lib/libblas.a</filename>.  You would then
          configure APBS by:
            <screen>
              <prompt>$</prompt> <userinput>cd ${FETK_SRC}/apbs</userinput>
              <prompt>$</prompt> <userinput>./configure --prefix=${FETK_PREFIX} --with-blas="-L/usr/local/lib -lblas"</userinput>
            </screen>
          </para>
        </note>
      Assuming all has gone well with the configuration, you're ready to
      compile and install APBS:
        <screen>
          <prompt>$</prompt> <userinput>make all</userinput>
          <prompt>$</prompt> <userinput>make install</userinput>
        </screen>
      This will place a version of the APBS binary at
      <filename>${FETK_PREFIX}/bin/${host_cpu}-${host_vendor}-${host_os}/apbs</filename>,
      where <parameter>${host_cpu}-${host_vendor}-${host_os}</parameter> is a
      machine-specific string.  This extra layer of obfuscation lets you keep
      several APBS binaries around in the same directory.  At this point you
      are ready to use APBS; either by calling the binary directly or adding
      the above directory to your path.  There are also several tools provided
      with APBS that remain in the APBS directory; these are described in later
      portions of this manual.  You may wish to copy these to a global location
      (or the same place as your APBS binary) at this time.
      </para>
    </sect2>

    <sect2> <title id="machine-sect">Machine-specific notes</title>
      <para>While the APBS and MALOC autoconf <literal>configure</literal>
      scripts are flexible enough to work on most platforms, the resulting
      executables don't always offer optimal performance.  We're slowly trying
      to provide binary support for some of the more popular platforms, this
      section is meant to supplement our pre-compiled binaries and provide some
      tips on how to get a better APBS binary on your platform.  <emphasis>If
      you have tips or trickes on improving APBS performance on your machine,
      please 
      <ulink url="mailto:apbs-users@cholla.wustl.edu">let us know!</ulink></emphasis>
      </para>

      <sect3> <title>Intel IA32/IA64</title>
        <para>In what follows, we're denoting Pentium/Xeon 32-bit Intel
        machines as "IA32" and Itanium* 64-bit Intel machines as "IA64".
        </para>

        <sect4> <title>Windows</title>
          <para>The only compilation I've done of APBS on Windows has been via
          Cygwin.  Therefore, I had to use the GNU compilers and the
          performance was pretty mediocre.  Furthermore, the resulting binary
          requires various Cygwin DLLs.  We're actively working to provide
          better (native) binary support under Windows.  </para>
        </sect4>

        <sect4> <title>Linux</title>
          <para> Compilation under Linux should be <emphasis>very</emphasis>
          straightforward as this is the platform on which APBA was developed.
          This section describes various compilation options under Linux.
          </para>

          <sect5> <title>GNU</title>
            <para> Nearly every Linux distribution comes with the GNU
            compilers; autoconf with configure with these by default.
            Furthermore, autoconf will automatically choose reasonable
            optimization (<option>-O2</option>) and debugging
            (<option>-g</option>) options.  I haven't had very good luck
            improving the performance beyond what's available with
            <option>-O2</option> and, given the availablity of the free Intel
            compilers, I'm not sure it's worth trying too hard.
            </para>
          </sect5>

          <sect5> <title>Intel</title>
            <para> We've mainly used the free (for Linux) 
            <ulink url="http://www.intel.com/software/products/compilers/">Intel
            compilers</ulink> and have observed very good performance.  There
            were some incompatibility issues with version 7 of the Intel
            compilers and newer versions of Linux (particularly those running
            glibc 2.3, e.g. RedHat 8 and 9).   
            </para>
            <para>First, you need to make sure the Intel compilers are set up
            properly; this usually is done by sourcing one of the input bash or
            csh scripts provided with the compilers.  
            </para>
            <para>You then need to define the environmental variables
            appropriate to these compilers <emphasis>before</emphasis> you
            configure either MALOC or APBS.  This is done by:
              <screen>
                <prompt>$</prompt> <userinput>export CC='icc'</userinput>
                <prompt>$</prompt> <userinput>export CXX='icc'</userinput>
                <prompt>$</prompt> <userinput>export F77='ifort'</userinput>
              </screen>
            If you want to use the compiled code on machines where the Intel
            compilers are not installed, you also need to set some linker
            options:
              <screen>
                <prompt>$</prompt> <userinput>export LDFLAGS='-static-libcxa'</userinput>
              </screen>
            </para>
            <para>Finally, you'll want to choose some optimization options.
            Intel has a number of options that are specific to the type of
            processor you are running; the examples below assume you are
            running on a Pentium 4:
              <screen>
                <prompt>$</prompt> <userinput>export FFLAGS='-fast -arch pn4'</userinput>
                <prompt>$</prompt> <userinput>export CFLAGS='-fast -tpp5'</userinput>
                <prompt>$</prompt> <userinput>export CXXFLAGS=${CFLAGS}</userinput>
              </screen> 
            </para>
          </sect5>
      
          <sect5> <title>Others</title>
            <para>There are a number of other good compilers (Portland Group,
            Absoft) that we have not tested with APBS.  If you have experience
            with these, please 
            <ulink url="mailto:apbs-users@cholla.wustl.edu">let us know.</ulink>
            </para>
          </sect5>
        </sect4>
      </sect3>

      <sect3> <title>Macintosh</title>
        <para>We are in the process of acquiring a Mac G5 to test the best
        compilation options, etc.  In the meantime, please visit the 
        <ulink url="http://cholla.wustl.edu/mailman/listinfo/apbs-users">apbs-users 
        mailing list</ulink> which has a number of threads which discuss
        installation on Mac OS platforms.
          <caution>
            <para>It has become apparent from the mailing lists that some
            "packages" of the GNU development software available for MacOS
            contain different versions of the C and FORTRAN compilers.  This is
            very bad; APBS will not compile with different versions of the C
            and FORTRAN compilers.</para>
          </caution>
        </para>
      </sect3>

      <sect3> <title>IBM Power3/Power4 AIX</title>
        <para>These are various compilation options I experimented with on the
        NPACI Blue Horizon platform -- we're working on acquiring a Power4
        machine for additional notes.  However, I expect some of the issues are
        applicable to other AIX machines.  In what follows, I used the
        <literal>mpcc</literal> and <literal>mpxlf</literal> compilers.
        </para>
        <para>
        In order to use a reasonable amount of memory during runs, you also
        need to specify <option>-bmaxdata:0x80000000</option> and
        <option>-bmaxstack:0x10000000</option>, or whatever values are
        appropriate to your system.  You'll also want to link to the IBM
        <literal>blas</literal>, <literal>mass</literal>, and
        <literal>essl</literal> libraries (if available) and optimize as much
        as possible for the specific machine you're running on.  Putting it all
        together gives:
          <screen>
            <prompt>$</prompt> <userinput>export CC=mpcc</userinput>
            <prompt>$</prompt> <userinput>export CXX=mpcc</userinput>
            <prompt>$</prompt> <userinput>export F77=mpxlf</userinput>
            <prompt>$</prompt> <userinput>export BLASPATH=/usr/lib</userinput>
            <prompt>$</prompt> <userinput>export CFLAGS="-bmaxdata:0x80000000 -bmaxstack:0x10000000 -L/usr/local/apps/mass -lmass -lessl -O3 -qstrict -qarch=pwr3 -qtune=pwr3 -qmaxmem=-1 -qcache=auto"</userinput>
            <prompt>$</prompt> <userinput>export FFLAGS="-qfixed=132 -bmaxdata:0x80000000 -bmaxstack:0x10000000 -L/usr/local/apps/mass -lmass -lessl -O3 -qstrict -qarch=pwr3 -qtune=pwr3 -qmaxmem=-1 -qcache=auto"</userinput>
          </screen>
        </para>
      </sect3>

      <sect3> <title>Sun/Solaris</title>
        <para>Compilation tips for this system are short and sweet:  Whatever
        you do, don't use the GNU compilers; they result in
        <emphasis>very</emphasis> slow binaries.
        </para>
      </sect3>

      <sect3> <title>DEC/Compaq/HP/Samsung Alpha</title>
        <para>Two tips:  
          <orderedlist>
            <listitem>
              <para> Don't use the GNU compilers; they result in
              <emphasis>very</emphasis> slow binaries.  </para>
            </listitem>
            <listitem>
              <para> Use the vendor-supplied BLAS library. </para>
            </listitem>
          </orderedlist>
        </para>
      </sect3>

      <sect3> <title>AMD Opteron</title>
        <para> Since the BLAS libraries that MALOC uses are not 64-bit clean, you must
               download a third-party BLAS for installation to succeed as well as make
               a few additional changes.  To compile APBS on the Opteron with MPI,
               you will most likely need to ensure that MPI was compiled with the 
               <literal>-fPIC</literal> flag.
           <orderedlist>
             <listitem>
                <para> Make sure the <literal>-fPIC</literal> flag is set in both 
                       <literal>CFLAGS</literal> and <literal>FFLAGS</literal>:
                   <screen>
                     <prompt>$</prompt> <userinput>export CFLAGS='-fPIC'</userinput>
                     <prompt>$</prompt> <userinput>export FFLAGS='-fPIC'</userinput>
                   </screen>
                </para>
             </listitem>
             <listitem>
                <para> When compiling MALOC, disable the building of the BLAS library:
                   <screen>
                      <prompt>$</prompt> <userinput>./configure --prefix=${FETK_PREFIX} --disable-blas</userinput>
                      <prompt>$</prompt> <userinput> make; make install </userinput>
                   </screen>
                </para>
             </listitem>
             <listitem>
                <para> Download the single-threaded BLAS for 64-bit Opteron from
                       Kazushige Goto's <ulink url="http://www.cs.utexas.edu/users/kgoto/">
                       site</ulink>.  Make sure you also download <literal>xerbla.f</literal>
                       as noted in Note 1.  Place both of these files in the
                       directory containing the libraries for APBS and MALOC - 
                       this will be the <parameter>$FETK_LIBRARY/[triplet]</parameter> directory, 
                       where <parameter>[triplet]</parameter> is a machine specific directory 
                       (i.e. <literal>
                       x86_64-unknown-linux</literal>).  You should see <literal>libmaloc.a
                       </literal> in this directory.  Set the <parameter> LD_LIBRARY_PATH
                       </parameter> variable to this directory, unzip the BLAS library, compile 
                       <literal>xerbla.f</literal> and create a new archive which will be 
                       <literal>libblas.a</literal> (replace <literal>libgoto_px_xxx.so
                       </literal> with the correctly named file):
                   <screen>
                     <prompt>$</prompt> <userinput> export LD_LIBRARY_PATH='${FETK_LIBRARY}/[triplet]:${LD_LIBRARY_PATH}'</userinput>
                     <prompt>$</prompt> <userinput> gunzip libgoto_px_xxx.so.gz</userinput>
                     <prompt>$</prompt> <userinput> gcc -c -O2 -fPIC xerbla.f</userinput>
                     <prompt>$</prompt> <userinput> ar cru libblas.a libgoto_px_xxx.so xerbla.o</userinput>
                     <prompt>$</prompt> <userinput> ranlib libblas.a</userinput>
                   </screen>
                </para>
             </listitem>
             <listitem>
                <para> Now proceed with standard APBS installation.  You do not need to use
                       the <literal>--with-blas</literal> flag, as the BLAS library has been
                       created in the standard directory.
                </para> 
             </listitem>
          </orderedlist>
        </para>
      </sect3>


    </sect2>
  </sect1>
</chapter>
