### ##########################################################################
### MC = < Manifold Code >
### Copyright (C) 1993  Michael Holst
### Copyright (C) 1999  Contributing authors listed in the code documentation
###                     retain the copyrights to their code contributions.
###
### The program MC is copyrighted software, and there are restrictions on its
### use, modification, and distribution; please refer to the document COPYING
### which accompanies this software.
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
### See the document COPYING for more details.
###
### You should have received a copy of the COPYING file with this program;
### if not, write to the author Michael Holst at:  mholst@math.ucsd.edu
###
### rcsid="$Id$"
### ##########################################################################

==============================
Unpacking the gzipped tar file
==============================

MC is distributed as a gzipped tar file, "mc.tgz".  The following command
will unpack MC into a number of files and subdirectories on any UNIX 
machine (and on any WinNT machine with the GNU-Win32 tools gzip and tar).

    gzip -dc mcpb.tgz | tar xvf -

======================================================================
Building the package using the GNU "configure" shell script and "make"
======================================================================

The "configure" shell script in the MC_ROOT directory (the toplevel directory
created when you unpacked the MC tgz file) will build the entire package.
This is a standard GNU autoconf-generated configuration script.
You should be able to simply type:

    ./configure
    make
    make install

If you ever need to rebuild the configure script or Makefile.in files that 
configure uses, the procedure is rougly as follows.  You first run aclocal to 
generate some m4 macros in the file aclocal.m4 which automake needs to use.
You then run autoconf to generate the master configure script in the root 
directory, from the input file configure.in.  You then run autoheader to
generate a config.h.in file from configure.in that will be used by configure
to generate a config.h file for the package.  You then finally run automake to
generate a Makefile.in file from each Makefile.am in various subdirectories 
specified in configure.in.  The script configure then generates the header
config.h from config.h.in as well as the final Makefile in each directory from
the Makefile.in files previously generated by automake.  I.e., you would do:

    rm -f config.cache
    aclocal
    autoconf
    autoheader
    automake

You would then configure and build as before:

    ./configure
    make
    make install

======================================================================
Notes for installation on various platforms
======================================================================
----------------------------------
Intel ix86 processor family with GCC 2.95.1 compiler
----------------------------------
Set the CC variable before ./configure depending on what you want to do:

  Figure out why the code isn't working:
  % setenv CC "gcc -Wall -g -O"

  Do production runs
  % setenv CC "gcc -O3 -ffast-math -m486 -funroll-loops"

Check to make sure the HAVE_MPI_H flag has been set in inc/config.h before
compiling.

----------------------------------
The Power3 IBM Blue Horizon system
----------------------------------
Set the CC variable before ./configure:

% setenv CC "mpcc -bmaxdata:0x80000000 -bmaxstack:0x10000000 \
                  -L/usr/local/apps/mass -lmass -O3 -qstrict \
                  -qarch=pwr3 -qtune=pwr3 -qmaxmem=-1 -qcache=auto"

Note that the actual command line declaration should contain no line breaks
and continuations; these seem to screw up sed (used by configure) under AIX.
Check to make sure the HAVE_MPI_H flag has been set in inc/config.h before
compiling.
